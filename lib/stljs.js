// Generated by CoffeeScript 1.12.4
(function() {
  var Stl, child_proc, fs, path, stl_parser, to_image;

  fs = require('fs');

  path = require('path');

  child_proc = require('child_process');

  stl_parser = require('./parser/stl_parser');

  to_image = require('./to/image');

  Stl = (function() {
    function Stl() {}

    return Stl;

  })();

  Stl.readFile = function(filePath, callback, progressCb) {
    return stl_parser.parseFile(filePath, callback, progressCb);
  };

  Stl.imageify = function(filePath, options, callback, progressCb) {
    if (options === null) {
      options = {};
    }
    if (options.width === null || typeof options.width === 'undefined') {
      options.width = 800;
    }
    if (options.height === null || typeof options.height === 'undefined') {
      options.height = 600;
    }
    return to_image.convertFile(filePath, options, callback, progressCb);
  };

  Stl.writeFile = function(fileName, solidName, polygons, callback) {
    var stream, writePolygon;
    stream = fs.createWriteStream(fileName);
    writePolygon = function(vertices, normal) {
      var i, len, vertex;
      stream.write("  facet normal " + normal.x + " " + normal.y + " " + normal.z + "\n");
      stream.write("    outer loop\n");
      for (i = 0, len = verticies.length; i < len; i++) {
        vertex = verticies[i];
        stream.write("      vertex " + vertex.pos.x + " " + vertex.pos.y + " " + vertex.pos.z + " \n");
      }
      stream.write("    endloop\n");
      return stream.write("  endfacet\n");
    };
    return stream.once('open', function(fd) {
      var i, j, len, normal, polygon, ref, v;
      stream.write("solid " + solidName + "\n");
      for (i = 0, len = polygons.length; i < len; i++) {
        polygon = polygons[i];
        normal = polygon.vertices[0].normal;
        for (v = j = 1, ref = polygon.verticies.length - 1; 1 <= ref ? j < ref : j > ref; v = 1 <= ref ? ++j : --j) {
          writePolygon([polygon.vertices[0], polygon.vertices[v], polygon.vertices[v + 1]], normal);
        }
      }
      stream.write("endsolid " + solidName + "\n");
      if (callback) {
        return callback(null);
      }
    });
  };

  module.exports = Stl;

}).call(this);
