// Generated by CoffeeScript 1.12.4
(function() {
  var Stl, stl_parser;

  stl_parser = require('../parser/stl_parser');

  Stl = (function() {
    function Stl() {}

    return Stl;

  })();

  Stl.PovRay = (function() {
    function PovRay() {}

    PovRay.prototype._povHeaders = function(name) {
      return "#declare " + name + " = mesh {\n";
    };

    PovRay.prototype._povFooters = function() {
      return "}";
    };

    PovRay.prototype.convertFile = function(filePath, callback, progressCb) {
      var output;
      output = "";
      return stl_parser.parseFile(filePath, (function(_this) {
        return function(err, polygons, name) {
          var unique_name;
          if (err != null) {
            callback(err);
            return;
          }
          unique_name = '__' + name + '__';
          output += _this._povFooters();
          return callback(null, output, unique_name);
        };
      })(this), (function(_this) {
        return function(err, polygon, name) {
          var povPolygon, unique_name;
          unique_name = '__' + name + '__';
          if (output.length === 0) {
            output += _this._povHeaders(unique_name);
          }
          povPolygon = _this.convertPolygon(polygon);
          output += povPolygon;
          if (progressCb != null) {
            return progressCb(err, povPolygon, unique_name);
          }
        };
      })(this));
    };

    PovRay.prototype.convertPolygon = function(polygon) {
      var i, idx, len, output, ref, vertex;
      output = "";
      output += "  triangle {\n";
      ref = polygon.verticies;
      for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
        vertex = ref[idx];
        output += "    <" + vertex[0] + ", " + (-vertex[1]) + ", " + vertex[2] + ">";
        if (idx !== (polygon.verticies.length - 1)) {
          output += ",\n";
        }
      }
      output += "  }\n";
      return output;
    };

    return PovRay;

  })();

  module.exports = new Stl.PovRay();

}).call(this);
